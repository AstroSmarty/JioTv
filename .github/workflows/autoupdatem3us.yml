name: Auto-Maintain 100 M3U Playlists with Cookie Updates

on:
  schedule:
    - cron: '*/5 * * * *'
  workflow_dispatch:

permissions:
  contents: write
  actions: read

env:
  TARGET_COUNT: 100
  SOURCE_PLAYLIST: "filtered_channels.m3u"
  NAMES_FILE: "get.txt"

jobs:
  maintain-playlists:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.PAT_TOKEN }}
        fetch-depth: 1

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Check source playlist exists
      run: |
        if [ ! -f "${{ env.SOURCE_PLAYLIST }}" ]; then
          echo "‚ùå ERROR: Source playlist ${{ env.SOURCE_PLAYLIST }} not found!"
          exit 1
        fi
        echo "‚úÖ Source playlist found: ${{ env.SOURCE_PLAYLIST }}"

    - name: Download source M3U and extract latest cookie
      run: |
        echo "=== EXTRACTING LATEST COOKIE FROM SOURCE ==="
        M3U_SOURCE="${{ secrets.M3U_URL }}"
        if [ -z "$M3U_SOURCE" ]; then
          echo "‚ùå ERROR: M3U_URL secret is empty!"
          exit 1
        fi
        echo "üì• Downloading source M3U playlist..."
        if ! curl -s -L --connect-timeout 30 --max-time 60 "$M3U_SOURCE" > source_playlist.m3u; then
          echo "‚ùå ERROR: Failed to download M3U playlist"
          exit 1
        fi
        if [ ! -s source_playlist.m3u ]; then
          echo "‚ùå ERROR: Downloaded M3U file is empty"
          exit 1
        fi
        TOTAL_LINES=$(wc -l < source_playlist.m3u)
        echo "‚úÖ Downloaded: $TOTAL_LINES lines"
        echo "üç™ Extracting cookie from source playlist..."
        EXTHTTP_COOKIE=$(grep -m1 '#EXTHTTP:.*cookie.*__hdnea__' source_playlist.m3u | sed 's/.*"cookie":"__hdnea__=\([^"]*\)".*/\1/' 2>/dev/null || echo "")
        URL_COOKIE=$(grep -m1 'hdnea__=' source_playlist.m3u | sed 's/.*__hdnea__=\([^&]*\).*/\1/' 2>/dev/null || echo "")
        NEW_COOKIE=""
        if [ ! -z "$EXTHTTP_COOKIE" ]; then
          NEW_COOKIE="$EXTHTTP_COOKIE"
          echo "‚úÖ Found cookie in #EXTHTTP: ${NEW_COOKIE:0:50}..."
        elif [ ! -z "$URL_COOKIE" ]; then
          NEW_COOKIE="$URL_COOKIE"
          echo "‚úÖ Found cookie in URL: ${NEW_COOKIE:0:50}..."
        else
          echo "‚ùå ERROR: No cookie found in source playlist!"
          exit 1
        fi
        echo "$NEW_COOKIE" > new_cookie.txt
        echo "üíæ New cookie saved: ${NEW_COOKIE:0:50}..."

    - name: Count existing playlist files and check current state
      id: check_files
      run: |
        echo "=== CHECKING CURRENT PLAYLIST FILES ==="
        EXISTING_FILES=($(find . -maxdepth 1 -name "*.m3u" -not -name "${{ env.SOURCE_PLAYLIST }}" | sort))
        CURRENT_COUNT=${#EXISTING_FILES[@]}
        echo "üìä Current playlist count: $CURRENT_COUNT"
        echo "üéØ Target count: ${{ env.TARGET_COUNT }}"
        printf '%s\n' "${EXISTING_FILES[@]}" > current_files.txt
        NEEDED=$((${{ env.TARGET_COUNT }} - CURRENT_COUNT))
        if [ $NEEDED -gt 0 ]; then
          echo "‚ûï Need to create $NEEDED new files"
          echo "needs_creation=true" >> $GITHUB_OUTPUT
          echo "files_needed=$NEEDED" >> $GITHUB_OUTPUT
        elif [ $NEEDED -lt 0 ]; then
          echo "‚ûñ Too many files! Need to remove $((NEEDED * -1)) files"
          echo "needs_cleanup=true" >> $GITHUB_OUTPUT
          echo "files_excess=$((NEEDED * -1))" >> $GITHUB_OUTPUT
        else
          echo "‚úÖ Perfect! Already have ${{ env.TARGET_COUNT }} files"
          echo "needs_creation=false" >> $GITHUB_OUTPUT
        fi
        echo "current_count=$CURRENT_COUNT" >> $GITHUB_OUTPUT

    - name: Generate random filenames for missing files
      if: steps.check_files.outputs.needs_creation == 'true'
      run: |
        echo "=== GENERATING NEW RANDOM FILENAMES ==="
        NEEDED=${{ steps.check_files.outputs.files_needed }}
        generate_random_name() {
          cat /dev/urandom | tr -dc 'a-z0-9' | fold -w 10 | head -n 1
        }
        EXISTING_NAMES=()
        if [ -f current_files.txt ]; then
          while IFS= read -r file; do
            basename_file=$(basename "$file" .m3u)
            EXISTING_NAMES+=("$basename_file")
          done < current_files.txt
        fi
        NEW_NAMES=()
        for ((i=1; i<=NEEDED; i++)); do
          while true; do
            NEW_NAME=$(generate_random_name)
            if [[ ! " ${EXISTING_NAMES[@]} " =~ " ${NEW_NAME} " ]] && [[ ! " ${NEW_NAMES[@]} " =~ " ${NEW_NAME} " ]]; then
              NEW_NAMES+=("$NEW_NAME")
              echo "üé≤ Generated: ${NEW_NAME}.m3u"
              break
            fi
          done
        done
        printf '%s\n' "${NEW_NAMES[@]}" > new_names.txt
        echo "‚úÖ Generated $NEEDED new filenames"

    - name: Create missing playlist files
      if: steps.check_files.outputs.needs_creation == 'true'
      run: |
        echo "=== CREATING MISSING PLAYLIST FILES ==="
        SOURCE_CONTENT=$(cat "${{ env.SOURCE_PLAYLIST }}")
        while IFS= read -r name; do
          if [ ! -z "$name" ]; then
            NEW_FILE="${name}.m3u"
            echo "$SOURCE_CONTENT" > "$NEW_FILE"
            echo "‚úÖ Created: $NEW_FILE"
          fi
        done < new_names.txt
        echo "üéâ All missing files created successfully!"

    - name: Get current cookie from existing files
      id: current_cookie
      run: |
        echo "=== EXTRACTING CURRENT COOKIE FROM EXISTING FILES ==="
        SAMPLE_FILE=$(find . -maxdepth 1 -name "*.m3u" -not -name "${{ env.SOURCE_PLAYLIST }}" | head -1)
        if [ ! -z "$SAMPLE_FILE" ] && [ -f "$SAMPLE_FILE" ]; then
          echo "üìã Checking cookie in: $SAMPLE_FILE"
          CURRENT_EXTHTTP_COOKIE=$(grep -m1 '#EXTHTTP:.*cookie.*__hdnea__' "$SAMPLE_FILE" | sed 's/.*"cookie":"__hdnea__=\([^"]*\)".*/\1/' 2>/dev/null || echo "")
          CURRENT_URL_COOKIE=$(grep -m1 'hdnea__=' "$SAMPLE_FILE" | sed 's/.*__hdnea__=\([^&]*\).*/\1/' 2>/dev/null || echo "")
          CURRENT_COOKIE=""
          if [ ! -z "$CURRENT_EXTHTTP_COOKIE" ]; then
            CURRENT_COOKIE="$CURRENT_EXTHTTP_COOKIE"
          elif [ ! -z "$CURRENT_URL_COOKIE" ]; then
            CURRENT_COOKIE="$CURRENT_URL_COOKIE"
          fi
          if [ ! -z "$CURRENT_COOKIE" ]; then
            echo "üìã Current cookie: ${CURRENT_COOKIE:0:50}..."
            echo "$CURRENT_COOKIE" > current_cookie.txt
          else
            echo "‚ö†Ô∏è  No current cookie found"
            echo "" > current_cookie.txt
          fi
        else
          echo "‚ÑπÔ∏è  No existing files to check for current cookie"
          echo "" > current_cookie.txt
        fi

    - name: Compare cookies and check for changes
      id: compare_cookies
      run: |
        NEW_COOKIE=$(cat new_cookie.txt 2>/dev/null || echo "")
        CURRENT_COOKIE=$(cat current_cookie.txt 2>/dev/null || echo "")
        if [ -z "$NEW_COOKIE" ]; then
          echo "‚ùå ERROR: No new cookie available"
          exit 1
        fi
        if [ "$NEW_COOKIE" = "$CURRENT_COOKIE" ] && [ ! -z "$CURRENT_COOKIE" ]; then
          echo "‚úÖ Cookie unchanged: ${NEW_COOKIE:0:50}..."
          echo "needs_update=false" >> $GITHUB_OUTPUT
        else
          echo "üîÑ Cookie change detected!"
          echo "üìã Current: ${CURRENT_COOKIE:0:50}..."
          echo "üÜï New:     ${NEW_COOKIE:0:50}..."
          echo "needs_update=true" >> $GITHUB_OUTPUT
        fi

    - name: Update cookies in all playlist files
      if: steps.compare_cookies.outputs.needs_update == 'true' || steps.check_files.outputs.needs_creation == 'true'
      run: |
        echo "=== UPDATING COOKIES IN ALL PLAYLIST FILES ==="
        NEW_COOKIE=$(cat new_cookie.txt)
        PLAYLIST_FILES=($(find . -maxdepth 1 -name "*.m3u" -not -name "${{ env.SOURCE_PLAYLIST }}"))
        echo "üîß Updating cookies in ${#PLAYLIST_FILES[@]} files..."
        ESCAPED_NEW_COOKIE=$(printf '%s\n' "$NEW_COOKIE" | sed 's/[[\.*^$()+?{|]/\\&/g')
        UPDATED_COUNT=0
        for file in "${PLAYLIST_FILES[@]}"; do
          if [ -f "$file" ]; then
            cp "$file" "${file}.backup"
            sed -i "s|#EXTHTTP:{\"cookie\":\"__hdnea__=[^\"]*\"}|#EXTHTTP:{\"cookie\":\"__hdnea__=$ESCAPED_NEW_COOKIE\"}|g" "$file"
            sed -i "s|__hdnea__=[^&]*|__hdnea__=$ESCAPED_NEW_COOKIE|g" "$file"
            UPDATED_COUNT=$((UPDATED_COUNT + 1))
            echo "‚úÖ Updated: $(basename "$file")"
          fi
        done
        echo "üéâ Successfully updated cookies in $UPDATED_COUNT files"

    - name: Update get.txt with all current filenames
      run: |
        echo "=== UPDATING GET.TXT WITH ALL FILENAMES ==="
        PLAYLIST_FILES=($(find . -maxdepth 1 -name "*.m3u" -not -name "${{ env.SOURCE_PLAYLIST }}" | sort))
        {
          echo "# Generated playlist files (Total: ${#PLAYLIST_FILES[@]})"
          echo "# Last updated: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          echo "# Target count: ${{ env.TARGET_COUNT }}"
          echo "# Current cookie: $(cat new_cookie.txt | head -c 50)..."
          echo ""
          for file in "${PLAYLIST_FILES[@]}"; do
            basename "$file"
          done
        } > "${{ env.NAMES_FILE }}"
        echo "üìù Updated ${{ env.NAMES_FILE }} with ${#PLAYLIST_FILES[@]} filenames"
        ACTUAL_COUNT=${#PLAYLIST_FILES[@]}
        if [ $ACTUAL_COUNT -eq ${{ env.TARGET_COUNT }} ]; then
          echo "‚úÖ Perfect! Exactly ${{ env.TARGET_COUNT }} files maintained"
        else
          echo "‚ö†Ô∏è  Warning: Expected ${{ env.TARGET_COUNT }} files, but found $ACTUAL_COUNT"
        fi

    - name: Validate all playlist files
      run: |
        echo "=== VALIDATING ALL PLAYLIST FILES ==="
        PLAYLIST_FILES=($(find . -maxdepth 1 -name "*.m3u" -not -name "${{ env.SOURCE_PLAYLIST }}"))
        VALID_COUNT=0
        INVALID_FILES=()
        for file in "${PLAYLIST_FILES[@]}"; do
          if [ -f "$file" ]; then
            if head -1 "$file" | grep -q "#EXTM3U"; then
              VALID_COUNT=$((VALID_COUNT + 1))
            else
              INVALID_FILES+=("$file")
            fi
          fi
        done
        echo "‚úÖ Valid playlist files: $VALID_COUNT"
        if [ ${#INVALID_FILES[@]} -gt 0 ]; then
          echo "‚ùå Invalid files found:"
          printf '%s\n' "${INVALID_FILES[@]}"
          exit 1
        fi
        NEW_COOKIE=$(cat new_cookie.txt)
        COOKIE_CONSISTENT=true
        for file in "${PLAYLIST_FILES[@]}"; do
          if [ -f "$file" ]; then
            if ! grep -q "hdnea__=$NEW_COOKIE" "$file"; then
              echo "‚ö†Ô∏è  Cookie inconsistency in: $(basename "$file")"
              COOKIE_CONSISTENT=false
            fi
          fi
        done
        if [ "$COOKIE_CONSISTENT" = true ]; then
          echo "‚úÖ All files have consistent cookies"
        else
          echo "‚ùå Cookie inconsistency detected!"
          exit 1
        fi

    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add *.m3u "${{ env.NAMES_FILE }}"
        if git diff --staged --quiet; then
          echo "‚ÑπÔ∏è  No changes to commit"
          exit 0
        fi
        TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
        NEW_COOKIE=$(cat new_cookie.txt)
        CURRENT_COUNT=$(find . -maxdepth 1 -name "*.m3u" -not -name "${{ env.SOURCE_PLAYLIST }}" | wc -l)
        COMMIT_MSG="ü§ñ Auto-maintain ${{ env.TARGET_COUNT }} M3U Playlists - $TIMESTAMP

üîÑ Cookie: ${NEW_COOKIE:0:50}...
üì∫ Playlist files: $CURRENT_COUNT
üéØ Target maintained: ${{ env.TARGET_COUNT }}
üìù Updated: ${{ env.NAMES_FILE }}
‚è∞ Last update: $TIMESTAMP

Changes:
- Updated cookies in all playlist files
- Maintained exactly ${{ env.TARGET_COUNT }} playlist files
- Updated filename list in ${{ env.NAMES_FILE }}"
        git commit -m "$COMMIT_MSG"
        git push
        echo "‚úÖ Changes committed and pushed successfully"

  

    - name: Workflow summary
      if: always()
      run: |
        echo "=== PLAYLIST MAINTENANCE WORKFLOW SUMMARY ==="
        echo "üèÅ Status: ${{ job.status }}"
        echo "‚è∞ Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
        CURRENT_COUNT=$(find . -maxdepth 1 -name "*.m3u" -not -name "${{ env.SOURCE_PLAYLIST }}" | wc -l)
        echo "üìä Current playlist count: $CURRENT_COUNT"
        echo "üéØ Target count: ${{ env.TARGET_COUNT }}"
        if [ $CURRENT_COUNT -eq ${{ env.TARGET_COUNT }} ]; then
          echo "‚úÖ SUCCESS: Exactly ${{ env.TARGET_COUNT }} files maintained"
        else
          echo "‚ö†Ô∏è  WARNING: Expected ${{ env.TARGET_COUNT }}, found $CURRENT_COUNT"
        fi
        if [ -f new_cookie.txt ]; then
          CURRENT_COOKIE=$(cat new_cookie.txt)
          echo "üç™ Current cookie: ${CURRENT_COOKIE:0:50}..."
        fi
        echo "üìù All filenames listed in: ${{ env.NAMES_FILE }}"
        echo "‚ú® Playlist maintenance workflow completed!"
